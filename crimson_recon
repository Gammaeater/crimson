#!/bin/bash
# Delete below line if you install Crimson from source:
PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/go/bin:/root/go/bin"
#
### CREATED BY KARMAZ
#
#
#
### FUNCTIONS:
#
# 1. SUBDOMAIN ENUMERATION
# 2. LIVE CHECK
# 3. TAKEOVER CHECK
# 4. SCREENSHOTS
# 5. CORS CHECK
# 6. IP RESOLVE
# 7. OPENED PORTS SCAN
# 8. URLS SCRAPING
# 9. API KEYS SCRAPING
# 10. GETTING VIRTUAL HOSTNAMES
#
### LISTS:
#
# 1. live.txt			- LIVE SUBDOMAINS
# 2. ip.txt				- ALL IPS
# 3. ports.txt			- OPENED PORTS
# 4. subjack.txt		- VULNS
# 5. screenshots 		- STATUS + SCREENS
# 6. cors_scan.txt		- VULNS
# 7. urls.txt			- ALL SPIDERS URLS IN ONE
# 8. status_live.txt	- HTTPS / HTTPS SUBDOMAINS STATUS
# 9. ldns-walk.txt		- DOMAINS FROM DNSSEC
# 10. subdomainizer.txt	- API KEYS / MORE SUBDOMAINS
# 11. hosthunter.txt	- VIRTUAL HOSTNAMES
# 12. nuclei.txt		- CVE SCAN
#
### WORKFLOW
#
# 1. Start Burp Suite
#	- Create new project - example.domain.com
#	- Turn off interception
# 2. Start this script.
# 3. Check the output listed above (LISTS)
# 4. Select single domain and start crimson_target module
#
###

echo -e "\033[0;31m
 ██████╗██████╗ ██╗███╗   ███╗███████╗ ██████╗ ███╗   ██╗        ██████╗ ███████╗ ██████╗ ██████╗ ███╗   ██╗
██╔════╝██╔══██╗██║████╗ ████║██╔════╝██╔═══██╗████╗  ██║        ██╔══██╗██╔════╝██╔════╝██╔═══██╗████╗  ██║
██║     ██████╔╝██║██╔████╔██║███████╗██║   ██║██╔██╗ ██║        ██████╔╝█████╗  ██║     ██║   ██║██╔██╗ ██║
██║     ██╔══██╗██║██║╚██╔╝██║╚════██║██║   ██║██║╚██╗██║        ██╔══██╗██╔══╝  ██║     ██║   ██║██║╚██╗██║
╚██████╗██║  ██║██║██║ ╚═╝ ██║███████║╚██████╔╝██║ ╚████║███████╗██║  ██║███████╗╚██████╗╚██████╔╝██║ ╚████║
 ╚═════╝╚═╝  ╚═╝╚═╝╚═╝     ╚═╝╚══════╝ ╚═════╝ ╚═╝  ╚═══╝╚══════╝╚═╝  ╚═╝╚══════╝ ╚═════╝ ╚═════╝ ╚═╝  ╚═══╝

\033[0m"


fuzzing_on=0
vhost_on=0
rust_on=0
third_level_on=0
udp_scan_on=0
proxy_on=0
subd_on=0
while getopts "D:xvpbuy" OPTION; do
    case $OPTION in
    D)
        export DOMAIN=$OPTARG
        ;;
    x)
        fuzzing_on=1
        ;;
    v)
		vhost_on=1
		;;
	p)
		rust_on=1
		;;
	u)
		udp_scan_on=1
		;;
	y)
		proxy_on=1
		;;
	s)
		subd_on=1
		;;
    *)
        echo "Usage: ./crimson_recon -D \"example.domain.com\"
                   # Optional flags are shown below:
                -x # Domain bruteforcing (with words/dns wordlist)
                -v # Virtual host discovering
                -p # TCP ports scanning (1-65535)
                -u # UDP ports scanning (nmap default ports)
                -b # Third level subdomain bruteforcing
                -y # Proxy urls.txt and live.txt to Burp (127.0.0.1:8080)
                -s # Find hidden subdomains and secrets within urls.txt with SubDomainizer (takes very long time)"
        exit 1
        ;;
    esac
done


### REMINDER OF BURP SUITE 
echo -e "\033[0;31m [+]\033[0m BURP SCOPE: .*\."$(tldextract "$DOMAIN" | cut -s -d " " -f 2-3 | sed "s/\ /\./" | sed "s/\./\\\./")$
echo
read -rsp $'\tRUN BURP, TURN OFF INTERCEPTION AND ADD SCOPE... THEN CLICK ENTER\n\n' -n1 key

### CREATING PROPER DIRECTORY
mkdir "$HOME"/bounty/"$DOMAIN" -p
cd "$HOME"/bounty/"$DOMAIN" || exit

### DOWNLOADING UP TO DATE LIST WITH RESOLVERS
echo -e "\033[0;31m [+]\033[0m DOWNLOADING FRESH RESOLVERS"
wget https://raw.githubusercontent.com/BonJarber/fresh-resolvers/main/resolvers.txt -O resolvers.txt > /dev/null 2>&1 || echo -e "8.8.8.8\n8.8.4.4" >> resolvers.txt

### STARTING PASSIVE ENUMERATION = subdomains.txt
echo -e "\033[0;31m [+]\033[0m SUBDOMAINS SCRAPING"
# crt.txt
curl -s https://crt.sh/?q="$DOMAIN" | grep "$DOMAIN" | grep TD | sed 's/<BR>.*$//g' | sed 's/<\/TD>.*$//' | sed 's/<TD>//g' | sed 's/\*.//g' | sed 's/ //g' | grep -v "TDclass" | grep -v "\@" | sort -u > crt.txt
cat crt.txt | anew subdomains.txt > /dev/null
rm crt.txt
# amass.txt
amass enum --passive -d "$DOMAIN" -o amass.txt -rf resolvers.txt > /dev/null
cat amass.txt | anew subdomains.txt > /dev/null
rm amass.txt
# subfinder.txt
subfinder -silent -recursive -d "$DOMAIN" -o subfinder.txt > /dev/null
cat subfinder.txt | anew subdomains.txt > /dev/null
rm subfinder.txt
# sudomy.txt
cd "$HOME"/tools/Sudomy || exit; ./sudomy -d "$DOMAIN" --no-probe -o "$DOMAIN" > /dev/null
cd "$HOME"/bounty/"$DOMAIN" || exit
cat "$HOME"/tools/Sudomy/"$DOMAIN"/Sudomy-Output/"$DOMAIN"/subdomain.txt | anew subdomains.txt
rm -rf "$HOME"/tools/Sudomy/"$DOMAIN"/Sudomy-Output/"$DOMAIN"
# assetfinder.txt
assetfinder --subs-only "$DOMAIN" >> assetfinder.txt
cat assetfinder.txt | anew subdomains.txt > /dev/null
rm assetfinder.txt
# paramspider.txt subdomains_paramspider.txt
python3 "$HOME"/tools/ParamSpider/paramspider.py -d "$DOMAIN" --output ./paramspider.txt --level high > /dev/null
cat paramspider.txt | unfurl -u domains | anew subdomains.txt > /dev/null

### 1ST BRUTEFORCE ON -x
if [ $fuzzing_on == 1 ]
then
	### STARTING 1ST BRUTEFORCE => subdomains.txt
	echo -e "\033[0;31m [+]\033[0m SUBDOMAINS BRUTEFORCING"
	puredns bruteforce "$HOME"/tools/CRIMSON/words/dns "$DOMAIN" -w puredns1.txt -r resolvers.txt -l 250
	cat puredns1.txt | anew subdomains.txt > /dev/null
	rm puredns1.txt
fi

### CHECKING FOR LIVE DOMAINS = live1.txt
echo -e "\033[0;31m [+]\033[0m CHECKING FOR LIVE SUBDOMAINS"
echo -e "\033[0;31m==================================\033[0m"
cat subdomains.txt | dnsx -t 100 -silent -r resolvers.txt -o live1.txt
echo -e "\033[0;31m==================================\033[0m"

### 2ND BRUTEFORCE ON -x
if [ $fuzzing_on == 1 ]
then
	### MAKING MUTATIONS FROM ENUMERATED SUBDOMAINS (EXCLUDE ALL SUBDOMAINS ENUMERATED TILL NOW) = altnds.txt
	echo -e "\033[0;31m [+]\033[0m MUTATING LIVE SUBDOMAINS"
	altdns -w "$HOME"/tools/CRIMSON/words/dns-altdns.txt -i live1.txt -o altdns_temp.txt
	cat "$HOME"/tools/CRIMSON/words/dns | sed "s/$/\.$DOMAIN/" > ddns.txt
	awk 'FNR==NR {a[$0]++; next} !($0 in a)' ddns.txt altdns_temp.txt > not_duplicated_altdns
	awk 'FNR==NR {a[$0]++; next} !($0 in a)' subdomains.txt not_duplicated_altdns > not_duplicated_altdns2
	awk 'FNR==NR {a[$0]++; next} !($0 in a)' live1.txt not_duplicated_altdns2 > altdns_with_domain_name
	cat altdns_with_domain_name | sed "s/\.$DOMAIN//g" > altdns.txt

	### STARTING 2ND BRUTEFORCE WITH MUTATED WORDLIST = puredns2.txt
	echo -e "\033[0;31m [+]\033[0m CHECKING MUTATED LIST FOR LIVE SUBDOMAINS"
	puredns bruteforce altdns.txt "$DOMAIN" -w puredns2.txt -r resolvers.txt -l 250 

	### CHECKING LIVE DOMAINS FROM BRUTEFORCE OF MUTATED WORDLIST = live2.txt
	cat puredns2.txt | dnsx -t 100 -silent -r resolvers.txt -o live2.txt > /dev/null

	### MERGING live1.txt AND live2.txt = live.txt
	sort -u live1.txt  > live.txt
	sort -u live2.txt | anew live.txt > /dev/null

	### CLEARING LOGS 
	rm live1.txt 
	rm live2.txt 
	rm altdns_temp.txt 
	rm not_duplicated_altnds 
	rm not_duplicated_altnds2 
	rm ddns.txt 
	rm altdns_with_domain_name 
	rm altdns.txt 
	rm puredns2.txt
else
	sort -u live1.txt  > live.txt
	rm live1.txt
fi

### SCRAPING THE INTERNET FOR URLS = gau.txt
echo -e "\033[0;31m [+]\033[0m GATHERING URLS"
cat live.txt | gau -subs >> gau.txt
cat gau.txt | unfurl -u domains > subs_gau.txt
sort -u subs_gau.txt live.txt > live2.txt
mv live2.txt live.txt
rm subs_gau.txt

### SCRAPING THE INTERNET FOR URLS = waybackurls.txt
cat live.txt | waybackurls >> waybackurls.txt
cat waybackurls.txt | unfurl -u domains > subs_waybackurls.txt
sort -u subs_waybackurls.txt live.txt > live2.txt
mv live2.txt live.txt
rm subs_waybackurls.txt

### MERGING SPIDERS IN ONE BIG LIST WITH A LOT BROKEN LINKS (it will be used in later modules) = urls.txt
cat waybackurls.txt | qsreplace -a > urls.txt
cat gau.txt | qsreplace -a | anew urls.txt > /dev/null
cat paramspider.txt | qsreplace -a | anew urls.txt > /dev/null
sed -i '/^$/d' urls.txt
rm waybackurls.txt paramspider.txt gau.txt

### CHECK FOR LIVE LINKS (to proxy only valid urls) > urls.txt
echo -e "\033[0;31m [+]\033[0m CHECKING FOR LIVE URLS"
cat urls.txt | httpx -threads 50 -silent -o httpx_urls.txt > /dev/null
mv httpx_urls.txt urls.txt

if [ $subd_on == 1 ]
then
	### LOOKING FOR SUBDOMAINS AND SECRETS IN URLS = subdomainizer.txt
	echo -e "\033[0;31m [+]\033[0m GATHERING SUBDOMAINS, API KEYS, URLS [SUBDOMAINIZER]"
	python3 "$HOME"/tools/SubDomainizer/SubDomainizer.py -k -l urls.txt -o subdomainizer.txt | tee -a subdomainizer.log
fi

### GETTING SUBDOMAINS FROM subdomainizer.txt AND CHECKING FOR LIVE = live.txt
cat subdomainizer.txt | grep "$DOMAIN" | dnsx -t 100 -silent -r resolvers.txt -o live3.txt
cat live3.txt | anew live.txt > /dev/null
rm live3.txt

### --- VHOST SECTION --- ### -v
if [ $vhost_on == 1 ]
then
	### RESOLVING IP FROM live.txt = ip.txt
	echo -e "\033[0;31m [+]\033[0m RESOVLING IP ADRESSES"
	while IFS= read -r domain; do echo "[+] $domain" >> "$HOME"/bounty/"$DOMAIN"/ip.txt && dig +short "$domain" >> "$HOME"/bounty/"$DOMAIN"/ip.txt ;done < "$HOME"/bounty/"$DOMAIN"/live.txt 
	
	### FILTERING ip.txt = filtered_ip.txt
	cat "$HOME"/bounty/"$DOMAIN"/ip.txt | grep -o -E '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | sort -u > "$HOME"/bounty/"$DOMAIN"/filtered_ip.txt
	
	### DISCOVERING VIRTUAL HOSTNAMES && ADD THEM TO live.txt = hosthunter.txt
	echo -e "\033[0;31m [+]\033[0m DISCOVERING VIRTUAL HOSTNAMES WITH HOSTHUNTER"
	python3 "$HOME"/tools/HostHunter/hosthunter.py filtered_ip.txt >> hosthunter.txt
	echo -e "\033[0;31m [+]\033[0m CHECKING LIVE HOSTS"
	cat hosthunter.txt | grep "$DOMAIN" | sort -u | anew | dnsx -t 100 -silent -r resolvers.txt -o live4.txt
	cat live4.txt | anew live.txt > /dev/null
	rm live4.txt
fi

### --- PORT SCANNING SECTION --- ### -p
if [ $rust_on == 1 ]
then
	### TCP SCANNING filtered_ip.txt FOR OPENED PORTS = nmap.txt
	echo -e "\033[0;31m [+]\033[0m TCP PORT SCANNING"
	rustscan -a filtered_ip.txt --ulimit 5000 --scan-order="Random" -- -n -A -Pn --append-output -oN nmap.txt -oG nmap.gnmap | tee -a rustscan.txt
fi

if [ $udp_scan_on == 1 ]
then
	### UDP SCANNING filtered_ip.txt FOR OPENED PORTS = udpnmap.txt -u
	echo -e "\033[0;31m [+]\033[0m UDP PORT SCANNING"
	while IFS= read -r ip; do nmap -sU "$ip" -A -Pn --append-output -oG udpnmap.gnmap -oN udpnmap.txt ;done < "$HOME"/bounty/"$DOMAIN"/filtered_ip.txt
fi

### MAKING SCREENSHOOTS FROM ENUERATED LIVE DOMAINS = screenshots/
echo -e "\033[0;31m [+]\033[0m MAKING SCREENSHOTS OF ENUMERATED LIVE DOMAINS"
gowitness file live.txt > /dev/null

### CHECKING STATUS CODE OF ALL DOMAINS = status_live.txt
echo -e "\033[0;31m [+]\033[0m CHECKING STATUS CODE OF ENUMERATED LIVE SUBDOMAINS"
cat live.txt | sed "s/^/http:\/\//" >> temp_live.txt
cat live.txt | sed "s/^/https:\/\//" >> temp_live.txt
wfuzz -f status_live.txt,raw -Z -z file,temp_live.txt -z file,"$HOME"/tools/CRIMSON/words/blank FUZZFUZ2Z > /dev/null 2>&1
rm temp_live.txt

### CHECKING ZONE TRANSFER = dnsrecon.txt
echo -e "\033[0;31m [+]\033[0m CHECKING ZONE TRANSFER"
dnsrecon -d "$DOMAIN" -a >> dnsrecon.txt

### DNSSEC RECON = ldns-walk.txt
echo -e "\033[0;31m [+]\033[0m CHECKING DNSSEC MISONFIGURATIONS"
ldns-walk "$DOMAIN" >> ldns-walk.txt

### CHECKING FOR CORS MISSCONFIGURATION = cors_scan.txt
echo -e "\033[0;31m [+]\033[0m CHECKING CORS"
cat live.txt | CorsMe -t 50 -output cors_scan.txt > /dev/null

### CHECKING SUBDOMAIN TAKEOVER = subjack.txt
echo -e "\033[0;31m [+]\033[0m CHECKING DOMAIN TAKEOVER"
# Temp workaround to subjack missed fingerprint issue:
fingerprint_location=$(find / 2>/dev/null -name "fingerprints.json" | grep "subjack" | grep -v "subjack\/fingerprints.json")
subjack -w live.txt -t 20 -timeout 30 -o subjack1.txt -ssl -a -c "$fingerprint_location"
cat subjack1.txt > subjack.txt 2>/dev/null
rm subjack1.txt 2>/dev/null
subjack -w live.txt -t 20 -timeout 30 -o subjack2.txt -a -c "$fingerprint_location"
cat subjack2.txt >> subjack.txt 2>/dev/null
rm subjack2.txt 2>/dev/null

### NUCLEI SCAN ON ALL LIVE DOMAINS
for line in $(cat live.txt); do echo -e "https://$line\nhttp://$line" ;done >> live_with_protocol.txt
git clone https://github.com/projectdiscovery/nuclei-templates.git
nuclei -l live_with_protocol.txt -t nuclei-templates/ -silent | tee -a nuclei.txt

### --- 3RDLEVEL SECTION --- ### -b
if [ $third_level_on == 1 ]
then
	### THRID LEVEL SUBDOMAINS BRUTE-FORCE = 3rdlevel_live.txt
	echo -e "\033[0;31m [+]\033[0m STARTING 3RDLEVEL ENUMERATION"
	mkdir 3rdlevel
	while IFS= read -r subdomain; do puredns bruteforce "$HOME"/tools/CRIMSON/words/dns "$subdomain" -w 3rdlevel/"$subdomain".txt -r resolvers.txt -l 250 ;done < live.txt
	sort -u 3rdlevel/* > 3rdlevel.txt
	cat 3rdlevel.txt | dnsx -o 3rdlevel_live.txt 2>/dev/null
	rm -rf 3rdlevel/3rdlevel.txt
fi

### --- PROXY SECTION --- ### -y
if [ $proxy_on == 1 ]
then
	### PROXING urls.txt TO BURP SUITE
	echo -e "\033[0;31m [+]\033[0m PROXING ulrs.txt TO BRUP SUITE"
	cat urls.txt | grep "$DOMAIN" |grep http | sort -u > proxy.txt
	wfuzz -L -Z -z file,proxy.txt -z file,"$HOME"/tools/CRIMSON/words/blank -p 127.0.0.1:8080 FUZZFUZ2Z > /dev/null 2>&1

	### PROXING DOMAINS TO BURP = proxy.txt
	echo -e "\033[0;31m [+]\033[0m PROXING SUBDOMAINS TO BURP"
	cat status_live.txt | grep -v "XXX" | cut -s -d "\"" -f 2 > proxy.txt
	wfuzz -L -Z -z file,proxy.txt -z file,"$HOME"/tools/CRIMSON/words/blank -p 127.0.0.1:8080 FUZZFUZ2Z > /dev/null 2>&1
fi

### CLEARING THE DIRECTORY
rm proxy.txt 2>/dev/null
rm resolvers.txt 2>/dev/null
rm error_requests.txt 2>/dev/null
find . -type d -empty -print -delete -o -type f -empty -print -delete

### PRINTING RESULTS
echo -e "\033[0;31m [+]\033[0m RESULTS: "
echo -e "-------------"
echo -e "\033[0;31m [+]\033[0m DOMAIN TAKEOVER:"
cat subjack.txt 2>/dev/null
echo -e "\033[0;31m [+]\033[0m CORS MISCONFIGURATIONS:"
cat cors_scan.txt 2>/dev/null
echo -e "\033[0;31m [+]\033[0m ZONE TRANSFER:"
zt=$(cat dnsrecon.txt | grep successful)
if [ -n "$zt" ];
then
    echo "\033[0;31m [++]\033[0m ZONE TRANSFER WAS SUCCESSFUL! - check the dnsreon.txt";
else
    echo "\033[0;31m [++]\033[0m Zone Transfer not found.";
fi
cat dnsrecon.txt 2>/dev/null
echo -e "\033[0;31m [+]\033[0m DNSSEC RECON:"
cat ldns-walk.txt 2>/dev/null
echo -e "\033[0;31m [+]\033[0m 3rd LEVEL SUBDOMAINS:"
cat 3rdlevel.txt 2>/dev/null
echo -e "-------------"
echo "Check:"
echo "	- status_live.txt" 
echo "	- BURP"
echo "	- gowitness"
echo "  - subdomainizer.txt"
if [ $vhost_on == 1 ]
then
	echo "	- hosthunter.txt"
fi
if [ $rust_on == 1 ]
then
	echo "	- nmap.txt"
fi
echo "			google-chrome http://localhost:7171/table/"
gowitness report serve

### GREP 2/3/4 LEVEL DOMAINS
# grep -P '^(?:[a-z0-9]+.){1}[^.]*$'	2nd level domains only
# grep -P '^(?:[a-z0-9]+.){2}[^.]*$'	3rd level domains only
# grep -P '^(?:[a-z0-9]+.){2,}[^.]*$'	3rd level domains or higher
# grep -P '^(?:[a-z0-9]+.){2,3}[^.]*$'	3rd to 4th level domains only
# grep -P '^(?:[a-z0-9]+.){3,}[^.]*$'	4th level domains or higher
###

### Socks4 Proxies
# https://proxyscrape.com/free-proxy-list

### Manual nmap:
# for line in $(cat ip_80); do nmap "$line" --script=http-enum -p80 -Pn -sV --max-rate=1 -oN ip_80.txt --append-output ;done
# for line in $(cat ip_443); do nmap "$line" --script=ssl-heartbleed.nse -p443 -Pn -sV --max-rate=1 -oN ip_443.txt --append-output ;done 
#  123.123.123.123
# nmap -sV --script=smb* 123.123.123.123

# A scan to search for DDOS reflection UDP services
# nmap -sU -A -PN -n -pU:19,53,123,161 -script=ntp-monlist,dns-recursion,snmp-sysdescr 192.168.1.0/24

# IP Address information
# nmap --script=asn-query,whois,ip-geolocation-maxmind 123.123.123.123/24